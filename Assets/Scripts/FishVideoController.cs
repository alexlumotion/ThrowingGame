using UnityEngine;
using UnityEngine.Video;

public class FishVideoController : MonoBehaviour
{
    public enum Direction { LeftToRight, RightToLeft }

    [Header("References")]
    [SerializeField] private VideoPlayer videoPlayer;

    [Header("Clips")]
    [Tooltip("–ö–ª—ñ–ø–∏, –¥–µ —Ä–∏–±–∏ –ø–ª–∏–≤—É—Ç—å –∑–ª—ñ–≤–∞ -> –Ω–∞–ø—Ä–∞–≤–æ")]
    [SerializeField] private VideoClip[] leftToRightClips;

    [Tooltip("–ö–ª—ñ–ø–∏, –¥–µ —Ä–∏–±–∏ –ø–ª–∏–≤—É—Ç—å —Å–ø—Ä–∞–≤–∞ -> –Ω–∞–ª—ñ–≤–æ")]
    [SerializeField] private VideoClip[] rightToLeftClips;

    [Tooltip("–ö–ª—ñ–ø–∏ —Ç—Ä–µ—Ç—å–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—è)")]
    [SerializeField] private VideoClip[] interludeClips;

    [Header("Playback")]
    [SerializeField] private bool autoPlayOnStart = true;
    [SerializeField] private Direction startDirection = Direction.LeftToRight;
    [SerializeField] private bool avoidImmediateRepeat = true;

    [Header("Interlude (–∫–æ–∂–Ω—ñ N —Å–µ–∫—É–Ω–¥)")]
    [Tooltip("–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5 —Ö–≤ = 300—Å)")]
    [Min(1f)] public float interludeIntervalSeconds = 300f;

    private Direction currentDirection;
    private VideoClip lastPlayedClip;

    // –Ü–Ω—Ç–µ—Ä–ª—é–¥—ñ—è/—Ç–∞–π–º–µ—Ä
    private float nextInterludeAt = Mathf.Infinity;
    private bool interludePending = false;     // –ø–æ–∑–Ω–∞—á–∫–∞: —Ç—Ä–µ–±–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—é –ø—ñ—Å–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ–ø—É
    private bool isInterludePlaying = false;   // –∑–∞—Ä–∞–∑ –≥—Ä–∞—î —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—è

    void Reset()
    {
        videoPlayer = GetComponent<VideoPlayer>();
    }

    void Awake()
    {
        if (!videoPlayer) videoPlayer = GetComponent<VideoPlayer>();
        if (!videoPlayer) videoPlayer = gameObject.AddComponent<VideoPlayer>();

        videoPlayer.isLooping = false;
        videoPlayer.playOnAwake = false;
        videoPlayer.source = VideoSource.VideoClip;

        videoPlayer.loopPointReached += OnVideoEnded;
        videoPlayer.errorReceived += (vp, msg) =>
        {
            Debug.LogWarning($"[FishVideoController] Video error: {msg}");
            // —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º —Å—Ç–∞–Ω–æ–º
            HandleNextOnEnd();
        };
    }

    void Start()
    {
        currentDirection = startDirection;
        ScheduleNextInterlude(); // —Å—Ç–∞—Ä—Ç—É—î–º–æ —Ç–∞–π–º–µ—Ä

        if (autoPlayOnStart)
            PlayNext(currentDirection);
    }

    void OnDestroy()
    {
        if (videoPlayer != null)
            videoPlayer.loopPointReached -= OnVideoEnded;
    }

    private void OnVideoEnded(VideoPlayer vp)
    {
        HandleNextOnEnd();
    }

    private void HandleNextOnEnd()
    {
        // –Ø–∫—â–æ —â–æ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        if (isInterludePlaying)
        {
            isInterludePlaying = false;
            ScheduleNextInterlude(); // –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ —Ç–∞–π–º–µ—Ä
            PlayNext(currentDirection); // –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —Ç–∏–º —Å–∞–º–∏–º –Ω–∞–ø—Ä—è–º–∫–æ–º, —â–æ –±—É–≤ –¥–æ —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—ó
            return;
        }

        // –Ø–∫—â–æ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—ó –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ ‚Äî –≥—Ä–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—é
        if (interludePending || Time.time >= nextInterludeAt)
        {
            interludePending = false;
            PlayInterlude();
            return;
        }

        // üîπ –ù–æ–≤–µ: –º—ñ–Ω—è—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–ª—ñ–ø—É
        currentDirection = currentDirection == Direction.LeftToRight
            ? Direction.RightToLeft
            : Direction.LeftToRight;

        PlayNext(currentDirection);
    }

    /// <summary>
    /// –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–∫–ª–∏–∫: –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫ —ñ –æ–¥—Ä–∞–∑—É –ø—Ä–æ–≥—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—ñ–ø.
    /// </summary>
    public void PlayDirection(Direction dir)
    {
        currentDirection = dir;
        // –Ω–µ –∑—Ä–∏–≤–∞—î–º–æ –ª–æ–≥—ñ–∫—É —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—ó ‚Äî –ø—Ä–æ—Å—Ç–æ –≥—Ä–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–≥—ñ–¥–Ω–æ —Å—Ç–∞–Ω—É
        if (!isInterludePlaying)
            PlayNext(currentDirection);
    }

    /// <summary>
    /// –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–∫–ª–∏–∫: –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫ (—Ç—É–º–±–ª–µ—Ä) —ñ –ø—Ä–æ–≥—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—ñ–ø (—è–∫—â–æ –Ω–µ –≥—Ä–∞—î —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—è).
    /// </summary>
    public void ToggleDirection()
    {
        currentDirection = currentDirection == Direction.LeftToRight
            ? Direction.RightToLeft
            : Direction.LeftToRight;

        if (!isInterludePlaying)
            PlayNext(currentDirection);
    }

    /// <summary>
    /// –ú–æ–∂–µ—à –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏.
    /// </summary>
    public void SetInterludeIntervalSeconds(float seconds)
    {
        interludeIntervalSeconds = Mathf.Max(1f, seconds);
        // –ø–µ—Ä–µ—Å–∫–µ–¥–∂—É–ª–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—é –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É,
        // –∞–ª–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ–ø—É
        ScheduleNextInterlude();
    }

    /// <summary>
    /// –í—Ä—É—á–Ω—É ‚Äú–ø–æ–ø—Ä–æ—Å–∏—Ç–∏‚Äù —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—é: —Å–ø—Ä–∞—Ü—é—î –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ–ø—É.
    /// </summary>
    public void RequestInterlude()
    {
        interludePending = true;
    }

    private void ScheduleNextInterlude()
    {
        nextInterludeAt = Time.time + interludeIntervalSeconds;
        interludePending = false;
    }

    private void PlayInterlude()
    {
        var pool = interludeClips;
        if (pool == null || pool.Length == 0)
        {
            Debug.LogWarning("[FishVideoController] No interlude clips assigned. Continue normal playback.");
            ScheduleNextInterlude();
            PlayNext(currentDirection);
            return;
        }

        var next = PickClip(pool);
        if (next == null)
        {
            Debug.LogWarning("[FishVideoController] Failed to pick interlude clip. Continue normal playback.");
            ScheduleNextInterlude();
            PlayNext(currentDirection);
            return;
        }

        isInterludePlaying = true;
        lastPlayedClip = next;
        videoPlayer.Stop();
        videoPlayer.clip = next;
        videoPlayer.Play();
    }

    private void PlayNext(Direction dir)
    {
        var pool = GetPool(dir);
        if (pool == null || pool.Length == 0)
        {
            Debug.LogWarning($"[FishVideoController] No clips for direction {dir}");
            return;
        }

        var next = PickClip(pool);
        if (next == null)
        {
            Debug.LogWarning("[FishVideoController] Failed to pick next clip.");
            return;
        }

        lastPlayedClip = next;

        videoPlayer.Stop();
        videoPlayer.clip = next;
        videoPlayer.Play();
    }

    private VideoClip[] GetPool(Direction dir)
    {
        return dir == Direction.LeftToRight ? leftToRightClips : rightToLeftClips;
    }

    private VideoClip PickClip(VideoClip[] pool)
    {
        if (pool.Length == 1) return pool[0];

        int tries = 0;
        VideoClip choice;
        do
        {
            choice = pool[Random.Range(0, pool.Length)];
            tries++;
            if (!avoidImmediateRepeat || lastPlayedClip == null) break;
        } while (choice == lastPlayedClip && tries < 8);

        return choice;
    }

    // (–æ–ø—Ü—ñ–π–Ω–æ) —è–∫—â–æ —Ö–æ—á–µ—à —Ñ–æ—Ä—Å—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–ª—é–¥—ñ—é –ø–æ —Ç–∞–π–º–µ—Ä—É –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫—ñ–Ω—Ü—è –∫–ª—ñ–ø—É:
    // –º–æ–∂–µ—à —É Update –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —á–∞—Å —ñ —Å—Ç–∞–≤–∏—Ç–∏ interludePending = true
    // –∞–ª–µ —Ç–∏ –ø—Ä–æ—Å–∏–≤ —á–µ–∫–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ ‚Äî —Ç–æ–∂ —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
}